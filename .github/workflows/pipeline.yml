name: Train Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - layers
      - config-train
  workflow_dispatch:
  # Allows external webhook trigger
  repository_dispatch:
    types:
      - webhook

jobs:
  test_train:
    name: Test train
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set Environment Variables
        run: echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Test files
        run: pytest src/test_train.py

  check_python_code_style:
    name: Check Python code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Validate Python Code Style
        run: pycodestyle .

  train_pipeline:
    name: Train pipeline
    runs-on: ubuntu-latest
    needs: [test_train]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Train Model
        run: python src/train.py

  # build_image:
  #   name: Build image
  #   runs-on: ubuntu-latest
  #   needs: [train_pipeline]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Docker Login
  #       run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}
  #     - name: Build the Docker image
  #       run: docker build . --file Dockerfile --tag ${{secrets.DOCKER_USER}}/${{secrets.DOCKER_IMAGE_NAME}}
  #     - name: Docker Push
  #       run: docker push ${{secrets.DOCKER_USER}}/${{secrets.DOCKER_IMAGE_NAME}}
